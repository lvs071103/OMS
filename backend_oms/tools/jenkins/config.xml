<?xml version="1.0" encoding="UTF-8" standalone="no"?><flow-definition plugin="workflow-job@1426.v2ecb_a_a_42fd46">
  <actions>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@2.2198.v41dd8ef6dd56"/>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@2.2198.v41dd8ef6dd56">
      <jobProperties/>
      <triggers/>
      <parameters>
        <string>AGENT</string>
        <string>BRANCH</string>
        <string>Type</string>
        <string>ACTION</string>
      </parameters>
      <options/>
    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>
  </actions>
  <description/>
  <keepDependencies>false</keepDependencies>
  <properties>
    
    <jenkins.model.BuildDiscarderProperty>
      <strategy class="hudson.tasks.LogRotator">
        <daysToKeep>10</daysToKeep>
        <numToKeep>30</numToKeep>
        <artifactDaysToKeep>-1</artifactDaysToKeep>
        <artifactNumToKeep>-1</artifactNumToKeep>
      </strategy>
    </jenkins.model.BuildDiscarderProperty>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.ChoiceParameterDefinition>
          <name>AGENT</name>
          <description>yes: 带探针;no: 不带探针</description>
          <choices class="java.util.Arrays$ArrayList">
            <a class="string-array">
              <string>yes</string>
              <string>no</string>
            </a>
          </choices>
        </hudson.model.ChoiceParameterDefinition>
        <hudson.model.ChoiceParameterDefinition>
          <name>Type</name>
          <description>deployment:一般部署;stress: 压测部署</description>
          <choices class="java.util.Arrays$ArrayList">
            <a class="string-array">
              <string>deployment</string>
              <string>stress</string>
            </a>
          </choices>
        </hudson.model.ChoiceParameterDefinition>
        <hudson.model.ChoiceParameterDefinition>
          <name>ACTION</name>
          <description>Deployment: 部署</description>
          <choices class="java.util.Arrays$ArrayList">
            <a class="string-array">
              <string>Deployment</string>
            </a>
          </choices>
        </hudson.model.ChoiceParameterDefinition>
        <hudson.model.TextParameterDefinition>
          <name>BRANCH</name>
          <description>分支</description>
          <defaultValue>release</defaultValue>
          <trim>false</trim>
        </hudson.model.TextParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@3903.v48a_8836749e9">
    <script>// 声明式流水线
pipeline {
    agent any
    parameters {
        choice(name: 'AGENT', choices: ['yes', 'no'], description: 'yes: 带探针;no: 不带探针')
        choice(name: 'Type', choices: ['deployment', 'stress'], description: 'deployment:一般部署;stress: 压测部署')
        choice(name: 'ACTION', choices: ['Deployment'], description: 'Deployment: 部署')
        text(name: 'BRANCH', defaultValue: 'release', description: '分支')
    }
    
    environment {
        def BUILDVERSION = sh(script: "echo `date '+%Y%m%d_%H%M%S'`", returnStdout: true).trim()
        def CONTAINER_PORT = '8766' //必改项目
        def NODEPORT = '30033' //必改项目
        def GIT_URL = 'http://10.23.195.149/dominos/source/back/dominos-gate2.git' //必改项目
        def NAMESPACE = 'default'
        def HARBOR = "http://harbor.dominos.com"
        def PJ_URL = "harbor.dominos.com/ec3.0"
        def NEWENV = "${env.ENV}"
        def KUBE_CONFIG = "${env.KUBE_CONFIG}"
        def DEPLOYMENT_NAME = "deploy-${JOB_BASE_NAME}"
        def SERVICE_NAME = "svc-${JOB_BASE_NAME}"
    }

    stages {
        stage('代码获取') {
            when {
                expression { env.ACTION.equals('Deployment') }
            }
            steps {
                script {
                    git branch: env.BRANCH, credentialsId: 'ea8b05cc-9f2b-4c21-b47d-4fec45fa8b6d', url: GIT_URL
                }
            }
        }
        // maven构建代码
        stage('代码构建') {
            when {
                expression { env.ACTION.equals('Deployment') }
            }
            steps{
                script {
                    sh '''export JAVA_HOME=/opt/Apps/jdks/jdk8u402-b06 &amp;&amp; \
                    export PATH=$JAVA_HOME/bin:$PATH  &amp;&amp; \
                    export MAVEN_HOME=/usr/local/maven3 &amp;&amp; \
                    export PATH=$MAVEN_HOME/bin:$PATH &amp;&amp; \
                    mvn clean install -Dmaven.test.skip=true'''
                }
            }
        }
        // 复制Docker模板文件
        stage("文件复制"){
            when {
                expression { env.ACTION.equals('Deployment') }
            }
            steps{
                script{
                    sh '''cp -rf /opt/Apps/attachments/backend/templates/Dockerfile ./'''
                    sh '''cp -rf /root/xowl ./'''
                    sh "sed -i 's/&lt;APP_NAME&gt;/${JOB_BASE_NAME}/' Dockerfile"
                    sh "sed -i 's/&lt;CONTAINER_PORT&gt;/${CONTAINER_PORT}/' Dockerfile"
                }
            }
        }

        stage('镜像制作') {
            when {
                expression { env.ACTION.equals('Deployment') }
            }
            steps{
                script {
                    withDockerRegistry(credentialsId: 'aa067543-35d6-4b28-bf01-0e0cf7e4a66f', 
                    url: "${HARBOR}") {
                        sh 'docker build -t ${PJ_URL}/${DEPLOYMENT_NAME}:${BUILDVERSION} ./'
                        sh 'docker push ${PJ_URL}/${DEPLOYMENT_NAME}:${BUILDVERSION}'
                    }
                }
            }
        }

        stage('初始化编排文件') {
            when {
                expression { env.ACTION.equals('Deployment') }
            }
            steps{
                script {
                    // 如果Streess等于yes则读取压测的副本配置，否则默认配置
                    def REPLICAS = readJSON file: "/opt/Apps/attachments/indicator/${Type}/replicas.json"
                    replicas_map = REPLICAS["uat"]
                    replicas_map.each {
                        key, value -&gt; if (key == "${JOB_BASE_NAME}") {
                            replicas_num = "${value}"
                        }
                    }
                    def resources = readJSON file: '/opt/Apps/attachments/indicator/deployment/resources.json'
                    // 如果是stress等于yes， 则使用Guaranteed， 否则使用Burstable
                    if(env.Type.equals('deployment')){
                        resources_obj = resources['Burstable']
                        requests_cpu_num = "${resources_obj.level3.requests.cpu}"
                        requests_memory = "${resources_obj.level3.requests.memory}"
                        limits_cpu_num = "${resources_obj.level3.limits.cpu}"
                        limits_memory = "${resources_obj.level3.limits.memory}"
                    }else{
                        resources_obj = resources["Guaranteed"]
                        requests_cpu_num = "${resources_obj.level3.requests.cpu}"
                        requests_memory = "${resources_obj.level3.requests.memory}"
                        limits_cpu_num = "${resources_obj.level3.limits.cpu}"
                        limits_memory = "${resources_obj.level3.limits.memory}"
                    }
                    // // 读取编排部署的执行命令
                    def deployment_shell = readJSON file: '/opt/Apps/attachments/backend/templates/dep_env.json'
                    if (env.AGENT.equals('yes')){
                        EXEC_COMMAND = deployment_shell['with_agent']
                    }else{
                        EXEC_COMMAND = deployment_shell['no_agent']
                    }
                    // 复制deployment模板文件
                    sh "cp -rf /opt/Apps/attachments/backend/templates/backend_template.yaml ${DEPLOYMENT_NAME}.yaml"
                    // 执行替换命令，替换模板中的变量
                    sh "sed -i 's#&lt;EXEC_COMMAND&gt;#${EXEC_COMMAND}#g' ${DEPLOYMENT_NAME}.yaml"
                    sh "sed -i 's/&lt;TAG&gt;/${BUILDVERSION}/g' ${DEPLOYMENT_NAME}.yaml"
                    sh "sed -i 's/&lt;APP_NAME&gt;/${JOB_BASE_NAME}/g' ${DEPLOYMENT_NAME}.yaml"
                    sh "sed -i 's/&lt;NAMESPACE&gt;/${NAMESPACE}/g' ${DEPLOYMENT_NAME}.yaml"
                    sh "sed -i 's/&lt;IMAGE&gt;/${DEPLOYMENT_NAME}/g' ${DEPLOYMENT_NAME}.yaml"
                    sh "sed -i 's/&lt;CONTAINER_PORT&gt;/${CONTAINER_PORT}/g' ${DEPLOYMENT_NAME}.yaml"
                    sh "sed -i 's/&lt;NODEPORT&gt;/${NODEPORT}/g' ${DEPLOYMENT_NAME}.yaml"
                    sh "sed -i 's/&lt;REPLICAS&gt;/${replicas_num}/g' ${DEPLOYMENT_NAME}.yaml"
                    sh "sed -i 's:&lt;PJ_URL&gt;:${PJ_URL}:g' ${DEPLOYMENT_NAME}.yaml"
                    sh "sed -i 's/&lt;DEPLOY_NAME&gt;/${DEPLOYMENT_NAME}/g' ${DEPLOYMENT_NAME}.yaml"
                    sh "sed -i 's/&lt;SERVICE_NAME&gt;/${SERVICE_NAME}/g' ${DEPLOYMENT_NAME}.yaml"
                    sh "sed -i 's/&lt;LIMITS_CPU&gt;/${limits_cpu_num}/g' ${DEPLOYMENT_NAME}.yaml"
                    sh "sed -i 's/&lt;LIMITS_MEM&gt;/${limits_memory}/g' ${DEPLOYMENT_NAME}.yaml"
                    sh "sed -i 's/&lt;REQUESTS_CPU&gt;/${requests_cpu_num}/g' ${DEPLOYMENT_NAME}.yaml"
                    sh "sed -i 's/&lt;REQUEST_MEM&gt;/${requests_memory}/g' ${DEPLOYMENT_NAME}.yaml"
                }
            }
        }
        
        stage ('应用发布') {
            when {
                expression { env.ACTION.equals('Deployment') }
            }
            steps {
                script {
                    sh "kubectl apply -f ${DEPLOYMENT_NAME}.yaml"
                                        echo "${DEPLOYMENT_NAME} 发布成功，请核对。"
                }
            }    
        }
    }
}</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>